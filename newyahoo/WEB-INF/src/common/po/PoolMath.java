// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) fieldsfirst

package common.po;

// Referenced classes of package y.po:
// _cls20

public class PoolMath {

	public static int	pi;
	public static int	pi_180;
	public static int	c		= 0x19220;
	public static int	n_1		= 0x10000;
	public static int	n_2		= 0x20000;
	public static int	four	= 0x40000;
	public static int	n_5		= 0x50000;
	public static int	n_100	= 0x640000;
	private static int	i[]		= { 0x10000, 65531, 65516, 65492, 65457, 65413,
			65358, 65294, 65220, 65137, 65043, 64940, 64827, 64704, 64571,
			64429, 64277, 64115, 63944, 63763, 63572, 63372, 63162, 62943,
			62714, 62476, 62228, 61971, 61705, 61429, 61145, 60851, 60547,
			60235, 59914, 59583, 59244, 58896, 58538, 58172, 57798, 57414,
			57022, 56621, 56212, 55794, 55368, 54934, 54491, 54040, 53581,
			53114, 52639, 52156, 51665, 51166, 50660, 50146, 49624, 49095,
			48559, 48015, 47464, 46906, 46341, 45769, 45190, 44604, 44011,
			43412, 42806, 42194, 41576, 40951, 40320, 39683, 39040, 38391,
			37736, 37076, 36410, 35738, 35062, 34380, 33692, 33000, 32303,
			31600, 30893, 30182, 29466, 28745, 28020, 27291, 26558, 25821,
			25080, 24335, 23586, 22834, 22078, 21320, 20557, 19792, 19024,
			18253, 17479, 16703, 15924, 15143, 14359, 13573, 12785, 11996,
			11204, 10411, 9616, 8820, 8022, 7224, 6424, 5623, 4821, 4019, 3216,
			2412, 1608, 804, 0, -803, -1607, -2411, -3215, -4018, -4820, -5622,
			-6423, -7223, -8021, -8819, -9615, -10410, -11203, -11995, -12784,
			-13572, -14358, -15142, -15923, -16702, -17478, -18252, -19023,
			-19791, -20556, -21319, -22077, -22833, -23585, -24334, -25079,
			-25820, -26557, -27290, -28019, -28744, -29465, -30181, -30892,
			-31599, -32302, -32999, -33691, -34379, -35061, -35737, -36409,
			-37075, -37735, -38390, -39039, -39682, -40319, -40950, -41575,
			-42193, -42805, -43411, -44010, -44603, -45189, -45768, -46340,
			-46905, -47463, -48014, -48558, -49094, -49623, -50145, -50659,
			-51165, -51664, -52155, -52638, -53113, -53580, -54039, -54490,
			-54933, -55367, -55793, -56211, -56620, -57021, -57413, -57797,
			-58171, -58537, -58895, -59243, -59582, -59913, -60234, -60546,
			-60850, -61144, -61428, -61704, -61970, -62227, -62475, -62713,
			-62942, -63161, -63371, -63571, -63762, -63943, -64114, -64276,
			-64428, -64570, -64703, -64826, -64939, -65042, -65136, -65219,
			-65293, -65357, -65412, -65456, -65491, -65515, -65530, 0xffff0000,
			-65530, -65515, -65491, -65456, -65412, -65357, -65293, -65219,
			-65136, -65042, -64939, -64826, -64703, -64570, -64428, -64276,
			-64114, -63943, -63762, -63571, -63371, -63161, -62942, -62713,
			-62475, -62227, -61970, -61704, -61428, -61144, -60850, -60546,
			-60234, -59913, -59582, -59243, -58895, -58537, -58171, -57797,
			-57413, -57021, -56620, -56211, -55793, -55367, -54933, -54490,
			-54039, -53580, -53113, -52638, -52155, -51664, -51165, -50659,
			-50145, -49623, -49094, -48558, -48014, -47463, -46905, -46340,
			-45768, -45189, -44603, -44010, -43411, -42805, -42193, -41575,
			-40950, -40319, -39682, -39039, -38390, -37735, -37075, -36409,
			-35737, -35061, -34379, -33691, -32999, -32302, -31599, -30892,
			-30181, -29465, -28744, -28019, -27290, -26557, -25820, -25079,
			-24334, -23585, -22833, -22077, -21319, -20556, -19791, -19023,
			-18252, -17478, -16702, -15923, -15142, -14358, -13572, -12784,
			-11995, -11203, -10410, -9615, -8819, -8021, -7223, -6423, -5622,
			-4820, -4018, -3215, -2411, -1607, -803, 0, 804, 1608, 2412, 3216,
			4019, 4821, 5623, 6424, 7224, 8022, 8820, 9616, 10411, 11204,
			11996, 12785, 13573, 14359, 15143, 15924, 16703, 17479, 18253,
			19024, 19792, 20557, 21320, 22078, 22834, 23586, 24335, 25080,
			25821, 26558, 27291, 28020, 28745, 29466, 30182, 30893, 31600,
			32303, 33000, 33692, 34380, 35062, 35738, 36410, 37076, 37736,
			38391, 39040, 39683, 40320, 40951, 41576, 42194, 42806, 43412,
			44011, 44604, 45190, 45769, 46341, 46906, 47464, 48015, 48559,
			49095, 49624, 50146, 50660, 51166, 51665, 52156, 52639, 53114,
			53581, 54040, 54491, 54934, 55368, 55794, 56212, 56621, 57022,
			57414, 57798, 58172, 58538, 58896, 59244, 59583, 59914, 60235,
			60547, 60851, 61145, 61429, 61705, 61971, 62228, 62476, 62714,
			62943, 63162, 63372, 63572, 63763, 63944, 64115, 64277, 64429,
			64571, 64704, 64827, 64940, 65043, 65137, 65220, 65294, 65358,
			65413, 65457, 65492, 65516, 65531 };
	private static int	j[]		= { 0, 804, 1609, 2414, 3220, 4026, 4834, 5644,
			6455, 7268, 8083, 8901, 9721, 10545, 11372, 12202, 13036, 13874,
			14717, 15564, 16416, 17273, 18136, 19005, 19880, 20762, 21650,
			22546, 23449, 24360, 25280, 26208, 27146, 28093, 29050, 30018,
			30996, 31986, 32988, 34002, 35030, 36071, 37126, 38196, 39281,
			40382, 41500, 42636, 43790, 44963, 46156, 47369, 48605, 49863,
			51145, 52451, 53784, 55144, 56532, 57950, 59398, 60880, 62395,
			63947, 0x10000, 0x1065d, 0x10ce3, 0x11394, 0x11a74, 0x12184,
			0x128c6, 0x1303f, 0x137f0, 0x13fdd, 0x14809, 0x15077, 0x1592d,
			0x1622e, 0x16b7e, 0x17523, 0x17f22, 0x18980, 0x19445, 0x19f76,
			0x1ab1c, 0x1b73f, 0x1c3e7, 0x1d11f, 0x1def1, 0x1ed6a, 0x1fc96,
			0x20c84, 0x21d44, 0x22ee9, 0x24187, 0x25534, 0x26a0a, 0x28026,
			0x297a8, 0x2b0b5, 0x2cb79, 0x2e823, 0x306ec, 0x32816, 0x34beb,
			0x372c6, 0x39d11, 0x3cb48, 0x3fe02, 0x435f7, 0x47405, 0x4b940,
			0x50700, 0x55ef9, 0x5c35d, 0x63709, 0x6bdd0, 0x75ce6, 0x81b98,
			0x9046e, 0xa2736, 0xb9cc6, 0xd8e82, 0x1046ea, 0x145b00, 0x1b2672,
			0x28bc49, 0x517bb6, 0x80000001, 0xffae844b, 0xffd743b8, 0xffe4d98f,
			0xffeba501, 0xffefb917, 0xfff2717f, 0xfff4633b, 0xfff5d8cb,
			0xfff6fb93, 0xfff7e469, 0xfff8a31b, 0xfff94231, 0xfff9c8f8,
			0xfffa3ca4, 0xfffaa108, 0xfffaf901, 0xfffb46c1, 0xfffb8bfc,
			0xfffbca0a, 0xfffc01ff, 0xfffc34b9, 0xfffc62f0, 0xfffc8d3b,
			0xfffcb416, 0xfffcd7eb, 0xfffcf915, 0xfffd17de, 0xfffd3488,
			0xfffd4f4c, 0xfffd6859, 0xfffd7fdb, 0xfffd95f7, 0xfffdaacd,
			0xfffdbe7a, 0xfffdd118, 0xfffde2bd, 0xfffdf37d, 0xfffe036b,
			0xfffe1297, 0xfffe2110, 0xfffe2ee2, 0xfffe3c1a, 0xfffe48c2,
			0xfffe54e5, 0xfffe608b, 0xfffe6bbc, 0xfffe7681, 0xfffe80df,
			0xfffe8ade, 0xfffe9483, 0xfffe9dd3, 0xfffea6d4, 0xfffeaf8a,
			0xfffeb7f8, 0xfffec024, 0xfffec811, 0xfffecfc2, 0xfffed73b,
			0xfffede7d, 0xfffee58d, 0xfffeec6d, 0xfffef31e, 0xfffef9a4, -65535,
			-63946, -62394, -60879, -59397, -57949, -56531, -55143, -53783,
			-52450, -51144, -49862, -48604, -47368, -46155, -44962, -43789,
			-42635, -41499, -40381, -39280, -38195, -37125, -36070, -35029,
			-34001, -32987, -31985, -30995, -30017, -29049, -28092, -27145,
			-26207, -25279, -24359, -23448, -22545, -21649, -20761, -19879,
			-19004, -18135, -17272, -16415, -15563, -14716, -13873, -13035,
			-12201, -11371, -10544, -9720, -8900, -8082, -7267, -6454, -5643,
			-4833, -4025, -3219, -2413, -1608, -803 };
	private static int	k[]		= { 0x800000, 0x7c65c7, 0x7ae75a, 0x79c19e,
			0x78c9be, 0x77ef25, 0x772953, 0x76733a, 0x75c991, 0x752a10,
			0x74930c, 0x740345, 0x7379c1, 0x72f5ba, 0x72768f, 0x71fbbc,
			0x7184d3, 0x711174, 0x70a152, 0x703426, 0x6fc9b5, 0x6f61c9,
			0x6efc36, 0x6e98d1, 0x6e3777, 0x6dd805, 0x6d7a5e, 0x6d1e68,
			0x6cc40b, 0x6c6b2f, 0x6c13c1, 0x6bbdaf, 0x6b68e6, 0x6b1558,
			0x6ac2f5, 0x6a71b1, 0x6a217e, 0x69d251, 0x698420, 0x6936df,
			0x68ea85, 0x689f0a, 0x685465, 0x680a8d, 0x67c17d, 0x67792c,
			0x673194, 0x66eaaf, 0x66a476, 0x665ee5, 0x6619f5, 0x65d5a2,
			0x6591e7, 0x654ebf, 0x650c26, 0x64ca18, 0x648890, 0x64478c,
			0x640706, 0x63c6fc, 0x63876b, 0x63484f, 0x6309a5, 0x62cb6a,
			0x628d9c, 0x625037, 0x621339, 0x61d69f, 0x619a68, 0x615e90,
			0x612316, 0x60e7f7, 0x60ad31, 0x6072c3, 0x6038a9, 0x5ffee3,
			0x5fc56e, 0x5f8c49, 0x5f5372, 0x5f1ae7, 0x5ee2a7, 0x5eaab0,
			0x5e7301, 0x5e3b98, 0x5e0473, 0x5dcd92, 0x5d96f3, 0x5d6095,
			0x5d2a76, 0x5cf496, 0x5cbef2, 0x5c898b, 0x5c545e, 0x5c1f6b,
			0x5beab0, 0x5bb62d, 0x5b81e1, 0x5b4dca, 0x5b19e7, 0x5ae638,
			0x5ab2bc, 0x5a7f72, 0x5a4c59, 0x5a1970, 0x59e6b6, 0x59b42a,
			0x5981cc, 0x594f9b, 0x591d96, 0x58ebbd, 0x58ba0e, 0x588889,
			0x58572d, 0x5825fa, 0x57f4ee, 0x57c40a, 0x57934d, 0x5762b5,
			0x573243, 0x5701f5, 0x56d1cc, 0x56a1c6, 0x5671e4, 0x564224,
			0x561285, 0x55e309, 0x55b3ad, 0x558471, 0x555555, 0x552659,
			0x54f77b, 0x54c8bc, 0x549a1b, 0x546b98, 0x543d31, 0x540ee7,
			0x53e0b9, 0x53b2a7, 0x5384b0, 0x5356d4, 0x532912, 0x52fb6b,
			0x52cddd, 0x52a068, 0x52730c, 0x5245c9, 0x52189e, 0x51eb8b,
			0x51be8f, 0x5191aa, 0x5164dc, 0x513825, 0x510b83, 0x50def7,
			0x50b280, 0x50861f, 0x5059d2, 0x502d99, 0x500175, 0x4fd564,
			0x4fa967, 0x4f7d7d, 0x4f51a6, 0x4f25e2, 0x4efa30, 0x4ece90,
			0x4ea301, 0x4e7784, 0x4e4c19, 0x4e20be, 0x4df574, 0x4dca3a,
			0x4d9f10, 0x4d73f6, 0x4d48ec, 0x4d1df1, 0x4cf305, 0x4cc829,
			0x4c9d5a, 0x4c729a, 0x4c47e9, 0x4c1d45, 0x4bf2ae, 0x4bc826,
			0x4b9daa, 0x4b733b, 0x4b48d9, 0x4b1e84, 0x4af43b, 0x4ac9fe,
			0x4a9fcd, 0x4a75a7, 0x4a4b8d, 0x4a217e, 0x49f77a, 0x49cd81,
			0x49a393, 0x4979af, 0x494fd5, 0x492605, 0x48fc3f, 0x48d282,
			0x48a8cf, 0x487f25, 0x485584, 0x482bec, 0x48025d, 0x47d8d6,
			0x47af57, 0x4785e0, 0x475c72, 0x47330a, 0x4709ab, 0x46e052,
			0x46b701, 0x468db7, 0x466474, 0x463b37, 0x461201, 0x45e8d0,
			0x45bfa6, 0x459682, 0x456d64, 0x45444b, 0x451b37, 0x44f229,
			0x44c920, 0x44a01c, 0x44771c, 0x444e21, 0x44252a, 0x43fc38,
			0x43d349, 0x43aa5f, 0x438178, 0x435894, 0x432fb4, 0x4306d8,
			0x42ddfe, 0x42b527, 0x428c53, 0x426381, 0x423ab2, 0x4211e5,
			0x41e91a, 0x41c051, 0x41978a, 0x416ec5, 0x414601, 0x411d3e,
			0x40f47c, 0x40cbbb, 0x40a2fb, 0x407a3c, 0x40517d, 0x4028be,
			0x400000, 0x3fd742, 0x3fae83, 0x3f85c4, 0x3f5d05, 0x3f3445,
			0x3f0b84, 0x3ee2c2, 0x3eb9ff, 0x3e913b, 0x3e6876, 0x3e3faf,
			0x3e16e6, 0x3dee1b, 0x3dc54e, 0x3d9c7f, 0x3d73ad, 0x3d4ad9,
			0x3d2202, 0x3cf928, 0x3cd04c, 0x3ca76c, 0x3c7e88, 0x3c55a1,
			0x3c2cb7, 0x3c03c8, 0x3bdad6, 0x3bb1df, 0x3b88e4, 0x3b5fe4,
			0x3b36e0, 0x3b0dd7, 0x3ae4c9, 0x3abbb5, 0x3a929c, 0x3a697e,
			0x3a405a, 0x3a1730, 0x39edff, 0x39c4c9, 0x399b8c, 0x397249,
			0x3948ff, 0x391fae, 0x38f655, 0x38ccf6, 0x38a38e, 0x387a20,
			0x3850a9, 0x38272a, 0x37fda3, 0x37d414, 0x37aa7c, 0x3780db,
			0x375731, 0x372d7e, 0x3703c1, 0x36d9fb, 0x36b02b, 0x368651,
			0x365c6d, 0x36327f, 0x360886, 0x35de82, 0x35b473, 0x358a59,
			0x356033, 0x353602, 0x350bc5, 0x34e17c, 0x34b727, 0x348cc5,
			0x346256, 0x3437da, 0x340d52, 0x33e2bb, 0x33b817, 0x338d66,
			0x3362a6, 0x3337d7, 0x330cfb, 0x32e20f, 0x32b714, 0x328c0a,
			0x3260f0, 0x3235c6, 0x320a8c, 0x31df42, 0x31b3e7, 0x31887c,
			0x315cff, 0x313170, 0x3105d0, 0x30da1e, 0x30ae5a, 0x308283,
			0x305699, 0x302a9c, 0x2ffe8b, 0x2fd267, 0x2fa62e, 0x2f79e1,
			0x2f4d80, 0x2f2109, 0x2ef47d, 0x2ec7db, 0x2e9b24, 0x2e6e56,
			0x2e4171, 0x2e1475, 0x2de762, 0x2dba37, 0x2d8cf4, 0x2d5f98,
			0x2d3223, 0x2d0495, 0x2cd6ee, 0x2ca92c, 0x2c7b50, 0x2c4d59,
			0x2c1f47, 0x2bf119, 0x2bc2cf, 0x2b9468, 0x2b65e5, 0x2b3744,
			0x2b0885, 0x2ad9a7, 0x2aaaab, 0x2a7b8f, 0x2a4c53, 0x2a1cf7,
			0x29ed7b, 0x29bddc, 0x298e1c, 0x295e3a, 0x292e34, 0x28fe0b,
			0x28cdbd, 0x289d4b, 0x286cb3, 0x283bf6, 0x280b12, 0x27da06,
			0x27a8d3, 0x277777, 0x2745f2, 0x271443, 0x26e26a, 0x26b065,
			0x267e34, 0x264bd6, 0x26194a, 0x25e690, 0x25b3a7, 0x25808e,
			0x254d44, 0x2519c8, 0x24e619, 0x24b236, 0x247e1f, 0x2449d3,
			0x241550, 0x23e095, 0x23aba2, 0x237675, 0x23410e, 0x230b6a,
			0x22d58a, 0x229f6b, 0x22690d, 0x22326e, 0x21fb8d, 0x21c468,
			0x218cff, 0x215550, 0x211d59, 0x20e519, 0x20ac8e, 0x2073b7,
			0x203a92, 0x20011d, 0x1fc757, 0x1f8d3d, 0x1f52cf, 0x1f1809,
			0x1edcea, 0x1ea170, 0x1e6598, 0x1e2961, 0x1decc7, 0x1dafc9,
			0x1d7264, 0x1d3496, 0x1cf65b, 0x1cb7b1, 0x1c7895, 0x1c3904,
			0x1bf8fa, 0x1bb874, 0x1b7770, 0x1b35e8, 0x1af3da, 0x1ab141,
			0x1a6e19, 0x1a2a5e, 0x19e60b, 0x19a11b, 0x195b8a, 0x191551,
			0x18ce6c, 0x1886d4, 0x183e83, 0x17f573, 0x17ab9b, 0x1760f6,
			0x17157b, 0x16c921, 0x167be0, 0x162daf, 0x15de82, 0x158e4f,
			0x153d0b, 0x14eaa8, 0x14971a, 0x144251, 0x13ec3f, 0x1394d1,
			0x133bf5, 0x12e198, 0x1285a2, 0x1227fb, 0x11c889, 0x11672f,
			0x1103ca, 0x109e37, 0x10364b, 0xfcbda, 0xf5eae, 0xeee8c, 0xe7b2d,
			0xe0444, 0xd8971, 0xd0a46, 0xc863f, 0xbfcbb, 0xb6cf4, 0xad5f0,
			0xa366f, 0x98cc6, 0x8d6ad, 0x810db, 0x73642, 0x63e62, 0x518a6,
			0x39a39, 0			};

	static {
		pi = 0x3243f;
		pi_180 = div(pi, intToYInt(180));
	}

	public static int Aa(int l) {
		int i1;
		int j1;
		if (l >= 0) {
			i1 = 0;
			j1 = 127;
		}
		else {
			i1 = 128;
			j1 = 255;
		}
		int k1;
		int l1;
		do {
			k1 = i1 + j1 >>> 1;
			l1 = l - j[k1];
			if (l1 > 0)
				i1 = k1 + 1;
			else if (l1 < 0)
				j1 = k1 - 1;
		}
		while (i1 <= j1 && l1 != 0);
		if (l >= 0)
			return ua(k1 << 15);
		return ua((int) (0xffffffffff800000L + ((long) k1 << 15)));
	}

	public static int add(int l, int i1) {
		return l + i1;
	}

	public static int arctan(int l) {
		if (l - 0x80000000 + 0x10000 > 0x80020000)
			throw new IllegalArgumentException("fixed variable " + l
					+ " out of bounds.");
		return ua(k[l + 0x10000 + 127 >> 8]);
	}

	public static int arctan(int l, int i1) {
		if (i1 == 0) {
			if (l == 0)
				return 0;
			return ua((int) (l >= 0 ? 0x400000L : 0xffffffffffc00000L));
		}
		int j1 = div(l, i1);
		if (j1 == 0 && Math.abs(l) > Math.abs(i1))
			return ua((int) (l >= 0 ? 0x400000L : 0xffffffffffc00000L));
		j1 = Ga(Aa(j1));
		if (j1 > 0 && l < 0 || j1 < 0 && l > 0)
			j1 = -j1;
		if (i1 >= 0)
			return ua(j1);
		if (l >= 0)
			j1 = (int) (j1 + 0x800000L);
		else
			j1 = (int) (j1 - 0x800000L);
		j1 = ua(j1);
		if (j1 >= 0)
			j1 = 2 * pi - j1;
		else
			j1 = -2 * pi - j1;
		return j1;
	}

	public static int cos(int l) {
		return i[(int) (Ga(l) + 16384L >> 15 & 511L)];
	}

	public static int div(int l, int i1) {
		long l1 = PoolMath2.div(l, i1);
		if (l1 > 0x7fffffffL)
			l1 = 0x7fffffffL;
		else if (l1 < 0xffffffff80000000L)
			l1 = 0xffffffff80000000L;
		return (int) l1;
	}

	public static int floatToYInt(float f1) {
		return (int) (f1 * 65536F);
	}

	public static int Ga(int l) {
		return div(mul(l, intToYInt(128)), pi);
	}

	public static int Ha(int l) {
		return l & 0xffffff00;
	}

	public static int intToYInt(int l) {
		return l << 16;
	}

	public static int mul(int l, int i1) {
		long l1 = (long) l * (long) i1;
		l1 >>= 16;
		return (int) l1;
	}

	public static int sin(int l) {
		return i[Ga(l) - 0x400000 + 16384 >>> 15 & 0x1ff];
	}

	public static int sqrt(int l) {
		return (int) PoolMath2.sqrt(l);
	}

	public static int ua(int l) {
		return mul(div(l, intToYInt(128)), pi);
	}

	public static float yintToFloat(int l) {
		return (float) (l / 65536D);
	}

	public static int yintToInt(int i) {
		return i >> 16;
	}

	public PoolMath() {
	}
}
